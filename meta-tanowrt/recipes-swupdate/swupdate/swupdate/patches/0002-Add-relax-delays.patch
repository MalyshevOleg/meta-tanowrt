From a44d7d70c88133dba41918f8328b9095e2bd5289 Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Sun, 28 Mar 2021 04:30:14 +0300
Subject: [PATCH 2/2] Add relax delays

These delays help to reduce the CPU load on heavy operations
by allowing other applications (ubus, uhttpd + firmware upgrade
LuCI application, etc.) to process messages (events) while the
firmware upgrade is in progress.

This is a temporary solution until a better firmware upgrade
backend for LuCI is developed.

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 core/cpio_utils.c      |  3 +++
 core/notifier.c        |  2 ++
 core/progress_thread.c |  6 ++++++
 core/swupdate.c        | 21 ++++++++++++++++++++-
 include/swupdate.h     |  5 +++++
 5 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/core/cpio_utils.c b/core/cpio_utils.c
index 84e9c83..389d3f2 100644
--- a/core/cpio_utils.c
+++ b/core/cpio_utils.c
@@ -550,6 +550,9 @@ int copyfile(int fdin, void *out, unsigned int nbytes, unsigned long *offs, unsi
 
 	for (;;) {
 		ret = step(state, buffer, sizeof buffer);
+
+		relax();
+
 		if (ret < 0) {
 			goto copyfile_exit;
 		}
diff --git a/core/notifier.c b/core/notifier.c
index 68447f2..d5ba417 100644
--- a/core/notifier.c
+++ b/core/notifier.c
@@ -234,6 +234,8 @@ void notify(RECOVERY_STATUS status, int error, int level, const char *msg)
 	} else { /* Main process */
 		STAILQ_FOREACH(elem, &clients, next)
 			(elem->client)(status, error, level, msg);
+
+		relax();
 	}
 }
 
diff --git a/core/progress_thread.c b/core/progress_thread.c
index 44d04fc..f319bdc 100644
--- a/core/progress_thread.c
+++ b/core/progress_thread.c
@@ -106,6 +106,7 @@ static void _swupdate_download_update(unsigned int perc, unsigned long long tota
 		send_progress_msg();
 	}
 	pthread_mutex_unlock(&pprog->lock);
+	relax();
 }
 
 void swupdate_progress_init(unsigned int nsteps) {
@@ -122,6 +123,7 @@ void swupdate_progress_init(unsigned int nsteps) {
 	/* Info is just an event, reset it after sending */
 	pprog->msg.infolen = 0;
 	pthread_mutex_unlock(&pprog->lock);
+	relax();
 }
 
 void swupdate_progress_update(unsigned int perc)
@@ -134,6 +136,7 @@ void swupdate_progress_update(unsigned int perc)
 		send_progress_msg();
 	}
 	pthread_mutex_unlock(&pprog->lock);
+	relax();
 }
 
 void swupdate_download_update(unsigned int perc, unsigned long long totalbytes)
@@ -171,6 +174,7 @@ void swupdate_progress_inc_step(char *image, char *handler_name)
 	pprog->msg.status = RUN;
 	send_progress_msg();
 	pthread_mutex_unlock(&pprog->lock);
+	relax();
 }
 
 void swupdate_progress_step_completed(void)
@@ -196,6 +200,7 @@ void swupdate_progress_end(RECOVERY_STATUS status)
 	pprog->msg.dwl_bytes = 0;
 
 	pthread_mutex_unlock(&pprog->lock);
+	relax();
 }
 
 void swupdate_progress_info(RECOVERY_STATUS status, int cause, const char *info)
@@ -210,6 +215,7 @@ void swupdate_progress_info(RECOVERY_STATUS status, int cause, const char *info)
 	/* Info is just an event, reset it after sending */
 	pprog->msg.infolen = 0;
 	pthread_mutex_unlock(&pprog->lock);
+	relax();
 }
 
 void swupdate_progress_done(const char *info)
diff --git a/core/swupdate.c b/core/swupdate.c
index d158063..b2773c3 100644
--- a/core/swupdate.c
+++ b/core/swupdate.c
@@ -24,6 +24,7 @@
 #include <signal.h>
 #include <sys/wait.h>
 #include <ftw.h>
+#include <time.h>
 
 #include "bsdqueue.h"
 #include "cpiohdr.h"
@@ -118,6 +119,7 @@ static struct option long_options[] = {
 #ifdef CONFIG_UBUS
 	{"ubus", no_argument, NULL, 'U'},
 #endif
+	{"relax", no_argument, NULL, 'r'},
 	{NULL, 0, NULL, 0}
 };
 
@@ -174,6 +176,7 @@ static void usage(char *programname)
 #ifdef CONFIG_UBUS
 		" -U, --ubus                     : enable ubus service\n"
 #endif
+		" -r, --relax                    : use relax delays\n"
 		" -h, --help                     : print this help and exit\n"
 		);
 #ifdef CONFIG_DOWNLOAD
@@ -505,7 +508,7 @@ int main(int argc, char **argv)
 #endif
 	memset(main_options, 0, sizeof(main_options));
 	memset(image_url, 0, sizeof(image_url));
-	strcpy(main_options, "vhni:e:q:l:Lcf:p:P:X:o:N:R:MmB");
+	strcpy(main_options, "vhni:e:q:l:Lcf:p:P:X:o:N:R:MmBr");
 #ifdef CONFIG_MTD
 	strcat(main_options, "b:");
 #endif
@@ -716,6 +719,9 @@ int main(int argc, char **argv)
 			swcfg.ubus_enabled = 1;
 			break;
 #endif
+		case 'r':
+			swcfg.relax++;
+			break;
 #ifdef CONFIG_DOWNLOAD
 		case 'd':
 			if (asprintf(&dwloptions,"%s %s", argv[0], optarg) ==
@@ -989,3 +995,16 @@ int main(int argc, char **argv)
 
 	return result;
 }
+
+void relax(void)
+{
+	if (swcfg.relax) {
+		long relax_time = swcfg.relax * RELAX_TIME_USEC;
+		struct timespec req = {
+			.tv_sec  = (relax_time / 1000000L),
+			.tv_nsec = (relax_time % 1000000L) * 1000L
+		};
+
+		nanosleep(&req, NULL);
+	}
+}
diff --git a/include/swupdate.h b/include/swupdate.h
index bd880f8..b2b99af 100644
--- a/include/swupdate.h
+++ b/include/swupdate.h
@@ -156,6 +156,7 @@ struct swupdate_cfg {
 #if defined(CONFIG_UBUS)
 	bool ubus_enabled;
 #endif
+	int relax;
 	int verbose;
 	int loglevel;
 	int cert_purpose;
@@ -193,4 +194,8 @@ int cpio_scan(int fd, struct swupdate_cfg *cfg, off_t start);
 struct swupdate_cfg *get_swupdate_cfg(void);
 void free_image(struct img_type *img);
 
+#define RELAX_TIME_USEC  2000L
+
+void relax(void);
+
 #endif
-- 
2.17.1

