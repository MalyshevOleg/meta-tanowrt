From 9055266916fa7f9e18ed8a21e3d90f1d8c7ebd18 Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Sat, 9 Feb 2019 01:18:40 +0300
Subject: [PATCH 02/13] service: Add initial cgroup support

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 CMakeLists.txt     |   5 ++
 service/instance.c | 259 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 service/instance.h |   5 ++
 3 files changed, 269 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3eb79f9..ebca992 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -33,6 +33,11 @@ FIND_LIBRARY(json NAMES json-c json)
 
 SET(LIBS ${ubox} ${ubus} ${json} ${blobmsg_json} ${json_script})
 
+IF(CGROUP_SUPPORT)
+	ADD_DEFINITIONS(-DCGROUP_SUPPORT)
+	SET(LIBS ${LIBS} cgroup)
+ENDIF()
+
 IF(DEBUG)
   ADD_DEFINITIONS(-DUDEV_DEBUG -g3)
 ENDIF()
diff --git a/service/instance.c b/service/instance.c
index 0f8f5e1..e692173 100644
--- a/service/instance.c
+++ b/service/instance.c
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2013 Felix Fietkau <nbd@openwrt.org>
  * Copyright (C) 2013 John Crispin <blogic@openwrt.org>
+ * Copyright (C) 2019 Anton Kikin <a.kikin@tano-systems.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License version 2.1
@@ -29,6 +30,21 @@
 #define SYSLOG_NAMES
 #include <syslog.h>
 
+#ifdef CGROUP_SUPPORT
+
+#include <string.h>
+#include <libcgroup.h>
+
+#ifndef CG_CONTROLLER_MAX
+#define CG_CONTROLLER_MAX 100
+#endif
+
+#ifndef CG_HIER_MAX
+#define CG_HIER_MAX CG_CONTROLLER_MAX
+#endif
+
+#endif
+
 #include <libubox/md5.h>
 
 #include "../procd.h"
@@ -66,6 +82,10 @@ enum {
 	INSTANCE_ATTR_OVERLAYDIR,
 	INSTANCE_ATTR_TMPOVERLAYSIZE,
 	INSTANCE_ATTR_CHDIR,
+#ifdef CGROUP_SUPPORT
+	INSTANCE_ATTR_CG_GROUP,
+	INSTANCE_ATTR_CG_STICKY,
+#endif
 	__INSTANCE_ATTR_MAX
 };
 
@@ -97,6 +117,10 @@ static const struct blobmsg_policy instance_attr[__INSTANCE_ATTR_MAX] = {
 	[INSTANCE_ATTR_OVERLAYDIR] = { "overlaydir", BLOBMSG_TYPE_STRING },
 	[INSTANCE_ATTR_TMPOVERLAYSIZE] = { "tmpoverlaysize", BLOBMSG_TYPE_STRING },
 	[INSTANCE_ATTR_CHDIR] = { "chdir", BLOBMSG_TYPE_STRING },
+#ifdef CGROUP_SUPPORT
+	[INSTANCE_ATTR_CG_STICKY] = { "cg_sticky", BLOBMSG_TYPE_BOOL },
+	[INSTANCE_ATTR_CG_GROUP] = { "cg_group", BLOBMSG_TYPE_ARRAY },
+#endif
 };
 
 enum {
@@ -351,6 +375,206 @@ instance_writepid(struct service_instance *in)
 	return 0;
 }
 
+#ifdef CGROUP_SUPPORT
+
+/**
+ * Auxiliary specifier of cgroup
+ */
+struct cgroup_group_spec {
+	char path[FILENAME_MAX];
+	char *controllers[CG_CONTROLLER_MAX];
+};
+
+static void free_cgroup_spec(
+	struct cgroup_group_spec **cdptr)
+{
+	int i;
+
+	for (i = 0; i < CG_HIER_MAX; i++) {
+		if (cdptr[i])
+			free(cdptr[i]);
+	}
+}
+
+static int parse_cgroup_spec(
+	struct cgroup_group_spec **cdptr,
+	char *cg_group)
+{
+	struct cgroup_group_spec *ptr;
+	int i, j;
+	char *cptr;
+	char *pathptr;
+	char *temp;
+	char *saveptr;
+	char *cg_group_tmp;
+
+	ptr = *cdptr;
+
+	/* Find first free entry inside the cgroup data array */
+	for (i = 0; i < CG_HIER_MAX; i++, ptr++) {
+		if (!cdptr[i])
+			break;
+	}
+
+	if (i == CG_HIER_MAX) {
+		/* No free slot found */
+		ERROR("cgroup: Max allowed hierarchies %d reached\n",
+			CG_HIER_MAX);
+		return -1;
+	}
+
+	cg_group_tmp = strdup(cg_group);
+	if (!cg_group_tmp)
+	{
+		ERROR("cgroup: %s\n", strerror(errno));
+		return -1;
+	}
+
+	/* Extract list of controllers */
+	cptr = strtok_r(cg_group_tmp, ":", &saveptr);
+	if (!cptr) {
+		free(cg_group_tmp);
+		return -1;
+	}
+
+	/* Extract cgroup path */
+	pathptr = strtok_r(NULL, ":", &saveptr);
+	if (!pathptr)
+	{
+		pathptr = cptr;
+		cptr = "*";
+	}
+
+	/* instanciate cgroup_data. */
+	cdptr[i] = calloc(1, sizeof(struct cgroup_group_spec));
+	if (!cdptr[i]) {
+		ERROR("cgroup: %s\n", strerror(errno));
+		free(cg_group_tmp);
+		return -1;
+	}
+
+	/* Convert list of controllers into an array of strings. */
+	j = 0;
+	do {
+		if (j == 0)
+			temp = strtok_r(cptr, ",", &saveptr);
+		else
+			temp = strtok_r(NULL, ",", &saveptr);
+
+		if (temp) {
+			cdptr[i]->controllers[j] = strdup(temp);
+			if (!cdptr[i]->controllers[j]) {
+				free(cdptr[i]);
+				cdptr[i] = 0;
+				free(cg_group_tmp);
+				ERROR("cgroup: %s\n", strerror(errno));
+				return -1;
+			}
+		}
+		j++;
+	} while (temp && j < CG_CONTROLLER_MAX - 1);
+
+	/* Store path to the cgroup */
+	strncpy(cdptr[i]->path, pathptr, FILENAME_MAX);
+	cdptr[i]->path[FILENAME_MAX - 1] = '\0';
+
+	free(cg_group_tmp);
+
+	return 0;
+}
+
+static void instance_run_cgroup_init(
+	struct service_instance *in, char **argv)
+{
+	int i;
+	int ret;
+	pid_t pid;
+	int flag_child = 0;
+	int rem;
+	struct blob_attr *cur;
+	char *cg_group;
+	struct cgroup_group_spec *cgroup_list[CG_HIER_MAX];
+
+	/* cgroup is not specified */
+	if (!in->cg_group)
+		return;
+
+	memset(cgroup_list, 0, sizeof(cgroup_list));
+
+	DEBUG(3, "Instance %s::%s: starting with enabled cgroup support\n",
+		in->srv->name, in->name);
+
+	ret = cgroup_init();
+	if (ret) {
+		ERROR("cgroup: libcgroup initialization failed: %s\n", cgroup_strerror(ret));
+		return;
+	}
+
+	blobmsg_for_each_attr(cur, in->cg_group, rem) {
+		cg_group = blobmsg_data(cur);
+
+		DEBUG(3, "Instance %s::%s: Adding cgroup controllers and path '%s'\n",
+			in->srv->name, in->name,
+			cg_group
+		);
+
+		ret = parse_cgroup_spec(
+			cgroup_list,
+			cg_group
+		);
+
+		if (ret) {
+			ERROR("cgroup: Failed to parse 'cg_group' parameter with '%s' value\n", cg_group);
+			free_cgroup_spec(cgroup_list);
+			return;
+		}
+	}
+
+	if (in->cg_sticky)
+	{
+		DEBUG(3, "Instance %s::%s: enabled cgroup sticky\n",
+			in->srv->name, in->name);
+
+		flag_child |= CGROUP_DAEMON_UNCHANGE_CHILDREN;
+	}
+
+	pid = getpid();
+
+	ret = cgroup_register_unchanged_process(pid, flag_child);
+	if (ret) {
+		ERROR("cgroup: Failed to register process\n");
+		free_cgroup_spec(cgroup_list);
+		return;
+	}
+
+	/*
+	 * User has specified the list of control group and
+	 * controllers
+	 * */
+	for (i = 0; i < CG_HIER_MAX; i++) {
+		if (!cgroup_list[i])
+			break;
+
+		ret = cgroup_change_cgroup_path(
+			cgroup_list[i]->path,
+			pid,
+			(const char * const *)cgroup_list[i]->controllers);
+
+		if (ret) {
+			ERROR("cgroup: change of group failed (%s)\n", cgroup_list[i]->path);
+			free_cgroup_spec(cgroup_list);
+			return;
+		}
+	}
+
+	free_cgroup_spec(cgroup_list);
+
+	DEBUG(3, "Instance %s::%s: sucessfully changed cgroup\n",
+		in->srv->name, in->name);
+}
+
+#endif
+
 static void
 instance_run(struct service_instance *in, int _stdout, int _stderr)
 {
@@ -429,6 +653,10 @@ instance_run(struct service_instance *in, int _stdout, int _stderr)
 		closefd(_stderr);
 	}
 
+#ifdef CGROUP_SUPPORT
+	instance_run_cgroup_init(in, argv);
+#endif
+
 	if (!in->has_jail && in->user && in->pw_gid && initgroups(in->user, in->pw_gid)) {
 		ERROR("failed to initgroups() for user %s: %m\n", in->user);
 		exit(127);
@@ -826,6 +1054,14 @@ instance_config_changed(struct service_instance *in, struct service_instance *in
 	if (string_changed(in->chdir, in_new->chdir))
 		return true;
 
+#ifdef CGROUP_SUPPORT
+	if (in->cg_sticky != in_new->cg_sticky)
+		return true;
+
+	if (!blob_attr_equal(in->cg_group, in_new->cg_group))
+		return true;
+#endif
+
 	return false;
 }
 
@@ -1159,6 +1395,14 @@ instance_config_parse(struct service_instance *in)
 			in->chdir = chdir;
 	}
 
+#ifdef CGROUP_SUPPORT
+	if (tb[INSTANCE_ATTR_CG_STICKY])
+		in->cg_sticky = blobmsg_get_bool(tb[INSTANCE_ATTR_CG_STICKY]);
+
+	if (tb[INSTANCE_ATTR_CG_GROUP])
+		in->cg_group = tb[INSTANCE_ATTR_CG_GROUP];
+#endif
+
 	instance_fill_any(&in->data, tb[INSTANCE_ATTR_DATA]);
 
 	if (!instance_fill_array(&in->env, tb[INSTANCE_ATTR_ENV], NULL, false))
@@ -1236,6 +1480,10 @@ instance_config_move(struct service_instance *in, struct service_instance *in_sr
 	in->node.avl.key = in_src->node.avl.key;
 	in->syslog_facility = in_src->syslog_facility;
 	in->chdir = in_src->chdir;
+#ifdef CGROUP_SUPPORT
+	in->cg_sticky = in_src->cg_sticky;
+	in->cg_group = in_src->cg_group;
+#endif
 
 	instance_config_move_strdup(&in->pidfile, in_src->pidfile);
 	instance_config_move_strdup(&in->seccomp, in_src->seccomp);
@@ -1301,6 +1549,10 @@ instance_init(struct service_instance *in, struct service *s, struct blob_attr *
 	in->exit_code = 0;
 	in->require_jail = false;
 
+#ifdef CGROUP_SUPPORT
+	in->cg_sticky = 0;
+#endif
+
 	in->_stdout.fd.fd = -2;
 	in->_stdout.stream.string_data = true;
 	in->_stdout.stream.notify_read = instance_stdout;
@@ -1444,5 +1696,12 @@ void instance_dump(struct blob_buf *b, struct service_instance *in, int verbose)
 	if (in->chdir)
 		blobmsg_add_string(b, "chdir", in->chdir);
 
+#ifdef CGROUP_SUPPORT
+	blobmsg_add_u8(b, "cg_sticky", in->cg_sticky);
+
+	if (in->cg_group)
+		blobmsg_add_blob(b, in->cg_group);
+#endif
+
 	blobmsg_close_table(b, i);
 }
diff --git a/service/instance.h b/service/instance.h
index 987b6b8..5167f13 100644
--- a/service/instance.h
+++ b/service/instance.h
@@ -74,6 +74,11 @@ struct service_instance {
 	int syslog_facility;
 	int exit_code;
 
+#ifdef CGROUP_SUPPORT
+	struct blob_attr *cg_group;
+	bool cg_sticky;
+#endif
+
 	uint32_t term_timeout;
 	uint32_t respawn_timeout;
 	uint32_t respawn_threshold;
-- 
2.16.2.windows.1

