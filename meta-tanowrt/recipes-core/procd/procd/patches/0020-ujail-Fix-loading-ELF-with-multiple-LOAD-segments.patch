From f0edf5667b4c1241bd4df389db59df9af9f03fdb Mon Sep 17 00:00:00 2001
From: Anton Kikin <a.kikin@tano-systems.com>
Date: Wed, 24 Feb 2021 17:13:46 +0300
Subject: [PATCH 20/20] ujail: Fix loading ELF with multiple LOAD segments

Signed-off-by: Anton Kikin <a.kikin@tano-systems.com>
---
 jail/elf.c | 59 ++++++++++++++++++++++++++++++++++++------------------
 1 file changed, 39 insertions(+), 20 deletions(-)

diff --git a/jail/elf.c b/jail/elf.c
index 3b47dbb..87a62ef 100644
--- a/jail/elf.c
+++ b/jail/elf.c
@@ -103,7 +103,7 @@ const char* find_lib(const char *file)
 	return l->path;
 }
 
-static int elf64_find_section(const char *map, unsigned int type, uint64_t *offset, uint64_t *size, uint64_t *vaddr)
+static int elf64_find_section(const char *map, unsigned int type, uint64_t *offset, uint64_t *size, uint64_t *vaddr, const uint64_t *search_addr)
 {
 	Elf64_Ehdr *e;
 	Elf64_Phdr *ph;
@@ -114,6 +114,12 @@ static int elf64_find_section(const char *map, unsigned int type, uint64_t *offs
 
 	for (i = 0; i < e->e_phnum; i++) {
 		if (ph[i].p_type == type) {
+			if (search_addr) {
+				if ((*search_addr < ph[i].p_vaddr) ||
+				    (*search_addr > (ph[i].p_vaddr + ph[i].p_memsz)))
+					continue;
+			}
+
 			*offset = ph[i].p_offset;
 			if (size)
 				*size = ph[i].p_filesz;
@@ -126,7 +132,7 @@ static int elf64_find_section(const char *map, unsigned int type, uint64_t *offs
 	return -1;
 }
 
-static int elf32_find_section(const char *map, unsigned int type, uint64_t *offset, uint64_t *size, uint64_t *vaddr)
+static int elf32_find_section(const char *map, unsigned int type, uint64_t *offset, uint64_t *size, uint64_t *vaddr, const uint64_t *search_addr)
 {
 	Elf32_Ehdr *e;
 	Elf32_Phdr *ph;
@@ -137,6 +143,12 @@ static int elf32_find_section(const char *map, unsigned int type, uint64_t *offs
 
 	for (i = 0; i < e->e_phnum; i++) {
 		if (ph[i].p_type == type) {
+			if (search_addr) {
+				if ((*search_addr < ph[i].p_vaddr) ||
+				    (*search_addr > (ph[i].p_vaddr + ph[i].p_memsz)))
+					continue;
+			}
+
 			*offset = ph[i].p_offset;
 			if (size)
 				*size = ph[i].p_filesz;
@@ -149,21 +161,21 @@ static int elf32_find_section(const char *map, unsigned int type, uint64_t *offs
 	return -1;
 }
 
-static int elf_find_section(const char *map, unsigned int type, uint64_t *offset, uint64_t *size, uint64_t *vaddr)
+static int elf_find_section(const char *map, unsigned int type, uint64_t *offset, uint64_t *size, uint64_t *vaddr, const uint64_t *search_addr)
 {
 	int clazz = map[EI_CLASS];
 
 	if (clazz == ELFCLASS32)
-		return elf32_find_section(map, type, offset, size, vaddr);
+		return elf32_find_section(map, type, offset, size, vaddr, search_addr);
 	else if (clazz == ELFCLASS64)
-		return elf64_find_section(map, type, offset, size, vaddr);
+		return elf64_find_section(map, type, offset, size, vaddr, search_addr);
 
 	ERROR("unknown elf format %d\n", clazz);
 
 	return -1;
 }
 
-static int elf32_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn_size, uint64_t load_offset)
+static int elf32_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn_size)
 {
 	Elf32_Dyn *dynamic = (Elf32_Dyn *) (map + dyn_offset);
 	const char *strtab = NULL;
@@ -175,15 +187,21 @@ static int elf32_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn
 		if (curr->d_tag != DT_STRTAB)
 			continue;
 
-		strtab = map + (curr->d_un.d_ptr - load_offset);
+		/* Find assicated LOAD section */
+		uint64_t search_addr = (uint64_t)curr->d_un.d_ptr;
+		uint64_t load_offset;
+		uint64_t load_vaddr;
+		elf_find_section(map, PT_LOAD, &load_offset, NULL, &load_vaddr, &search_addr);
+
+		strtab = map + (curr->d_un.d_ptr - (uintptr_t)(load_vaddr - load_offset));
 		break;
 	}
 
 	if (!strtab)
 		return -1;
 
-	dynamic = (Elf32_Dyn *) (map + dyn_offset);
-	while ((void *) dynamic < (void *) (map + dyn_offset + dyn_size)) {
+	dynamic = (Elf32_Dyn *) (map + (uintptr_t)dyn_offset);
+	while ((void *) dynamic < (void *) (map + (uintptr_t)dyn_offset + (uintptr_t)dyn_size)) {
 		Elf32_Dyn *curr = dynamic;
 
 		dynamic++;
@@ -197,7 +215,7 @@ static int elf32_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn
 	return 0;
 }
 
-static int elf64_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn_size, uint64_t load_offset)
+static int elf64_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn_size)
 {
 	Elf64_Dyn *dynamic = (Elf64_Dyn *) (map + dyn_offset);
 	const char *strtab = NULL;
@@ -209,7 +227,13 @@ static int elf64_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn
 		if (curr->d_tag != DT_STRTAB)
 			continue;
 
-		strtab = map + (curr->d_un.d_ptr - load_offset);
+		/* Find assicated LOAD section */
+		uint64_t search_addr = (uint64_t)curr->d_un.d_ptr;
+		uint64_t load_offset;
+		uint64_t load_vaddr;
+		elf_find_section(map, PT_LOAD, &load_offset, NULL, &load_vaddr, &search_addr);
+
+		strtab = map + (curr->d_un.d_ptr - (uintptr_t)(load_vaddr - load_offset));
 		break;
 	}
 
@@ -234,24 +258,19 @@ static int elf64_scan_dynamic(const char *map, uint64_t dyn_offset, uint64_t dyn
 int elf_load_deps(const char *path, const char *map)
 {
 	uint64_t dyn_offset, dyn_size;
-	uint64_t load_offset, load_vaddr;
 	uint64_t interp_offset;
 #if defined(__mips__) && (__mips == 64)
 	static int gcc_mips64_bug_work_around;
 
 	gcc_mips64_bug_work_around = 1;
 #endif
-	if (elf_find_section(map, PT_LOAD, &load_offset, NULL, &load_vaddr)) {
-		ERROR("failed to load the .load section from %s\n", path);
-		return -1;
-	}
 
-	if (elf_find_section(map, PT_DYNAMIC, &dyn_offset, &dyn_size, NULL)) {
+	if (elf_find_section(map, PT_DYNAMIC, &dyn_offset, &dyn_size, NULL, NULL)) {
 		ERROR("failed to load the .dynamic section from %s\n", path);
 		return -1;
 	}
 
-	if (elf_find_section(map, PT_INTERP, &interp_offset, NULL, NULL) == 0) {
+	if (elf_find_section(map, PT_INTERP, &interp_offset, NULL, NULL, NULL) == 0) {
 		add_path_and_deps(map+interp_offset, 1, -1, 0);
 	}
 
@@ -266,9 +285,9 @@ int elf_load_deps(const char *path, const char *map)
 #endif
 
 	if (clazz == ELFCLASS32)
-		return elf32_scan_dynamic(map, dyn_offset, dyn_size, load_vaddr - load_offset);
+		return elf32_scan_dynamic(map, dyn_offset, dyn_size);
 	else if (clazz == ELFCLASS64)
-		return elf64_scan_dynamic(map, dyn_offset, dyn_size, load_vaddr - load_offset);
+		return elf64_scan_dynamic(map, dyn_offset, dyn_size);
 
 	ERROR("unknown elf format %d\n", clazz);
 	return -1;
-- 
2.28.0.windows.1

