#!/bin/sh
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: 2021 Tano Systems LLC. All rights reserved.

# NXP LS1028A RDB SWUPDATE specific files generation

get_dpfw_version() {
	local DPFW_PATH=${1}
	local VERSION=$(dd if=${DPFW_PATH} bs=262144 skip=12 count=1 2>/dev/null \
		| strings 2>/dev/null \
		| grep -E '\$Revision: [0-9]+ \$' \
		| sed -e 's/\$Revision: \([0-9]\+\) \$/\1/' \
		| tr '\n' '.' \
		| sed 's/.$/\n/')

	echo ${VERSION}
}

get_ppafw_version() {
	local PPAFW_PATH=${1}
	local VERSION=$(dd if=${PPAFW_PATH} bs=262144 skip=13 count=1 2>/dev/null \
		| strings 2>/dev/null \
		| grep 'PPA Firmware: Version' \
		| awk '{ print $4 }')

	echo ${VERSION}
}

get_uboot_version() {
	local UBOOT_PATH=${1}
	local VERSION=$(dd if=${UBOOT_PATH} bs=131072 skip=8 count=4 2>/dev/null \
		| strings 2>/dev/null \
		| grep -m 1 'U-Boot SPL 20' \
		| awk '{print $3}')

	echo ${VERSION}
}

get_startup_version() {
	local STARTUP_PATH=${1}
	local VERSION=$(dd if=${STARTUP_PATH} bs=128 skip=28672 count=1 2>/dev/null \
		| strings 2>/dev/null \
		| grep -m 1 'version:' \
		| awk '{print $4}')

	echo ${VERSION}
}

get_kernel_version() {
	echo $(uname -r)
}

get_rootfs_version() {
	local VERSION=""
	if [ -f /etc/tanowrt_release ]; then
		source /etc/tanowrt_release
		if [ "${DISTRIB_TIMESTAMP}" != "" ]; then
			VERSION=${DISTRIB_TIMESTAMP//[ :-]/-}
		fi
	fi

	echo ${VERSION}
}

do_swupdate_gen_sw_versions() {
	. /usr/lib/swupdate/swupdate_config

	local TMPFILE="${SWU_SW_VERSIONS_FILE_TMP}"

	local UBOOT_PATH="/dev/mmcblk0"
	local STARTUP_PATH="/dev/mmcblk0"
	local DPFW_PATH="/dev/mmcblk0"
	local PPAFW_PATH="/dev/mmcblk0"

	echo -n > ${TMPFILE}

	# U-Boot version
	local UBOOT_VERSION=$(get_uboot_version ${UBOOT_PATH})
	if [ "${UBOOT_VERSION}" != "" ]; then
		echo "uboot ${UBOOT_VERSION}" >> ${TMPFILE}
		echo "SWUPDATE: U-Boot version ${UBOOT_VERSION}" > /dev/kmsg
	else
		echo "SWUPDATE: Failed to extract the U-Boot version from '${UBOOT_PATH}'" > /dev/kmsg
	fi

	# U-Boot startup script version
	local STARTUP_VERSION=$(get_startup_version ${STARTUP_PATH})
	if [ "${STARTUP_VERSION}" != "" ]; then
		echo "startup ${STARTUP_VERSION}" >> ${TMPFILE}
		echo "SWUPDATE: U-Boot startup version ${STARTUP_VERSION}" > /dev/kmsg
	else
		echo "SWUPDATE: Failed to extract the U-Boot startup version from '${STARTUP_PATH}'" > /dev/kmsg
	fi

	# DP firmware version
	local DPFW_VERSION=$(get_dpfw_version ${DPFW_PATH})
	if [ "${DPFW_VERSION}" != "" ]; then
		echo "dpfw ${DPFW_VERSION}" >> ${TMPFILE}
		echo "SWUPDATE: DP firmware version ${DPFW_VERSION}" > /dev/kmsg
	else
		echo "SWUPDATE: Failed to extract the DP firmware version from '${DPFW_PATH}'" > /dev/kmsg
	fi

	# PPA firmware
	local PPAFW_VERSION=$(get_ppafw_version ${PPAFW_PATH})
	if [ "${PPAFW_VERSION}" != "" ]; then
		echo "ppafw ${PPAFW_VERSION}" >> ${TMPFILE}
		echo "SWUPDATE: PPA firmware version ${PPAFW_VERSION}" > /dev/kmsg
	else
		echo "SWUPDATE: Failed to extract the PPA firmware version from '${PPAFW_PATH}'" > /dev/kmsg
	fi

	# Kernel version (from uname)
	local KERNEL_VERSION=$(get_kernel_version)
	if [ "${KERNEL_VERSION}" != "" ]; then
		echo "kernel ${KERNEL_VERSION}" >> ${TMPFILE}
		echo "SWUPDATE: Kernel version ${KERNEL_VERSION}" > /dev/kmsg
	else
		echo "SWUPDATE: Failed to extract the kernel version" > /dev/kmsg
	fi

	# ROOTFS version
	local ROOTFS_VERSION=$(get_rootfs_version)
	if [ "${ROOTFS_VERSION}" != "" ]; then
		echo "rootfs ${ROOTFS_VERSION}" >> ${TMPFILE}
		echo "SWUPDATE: Read-only filesystem version ${ROOTFS_VERSION}" > /dev/kmsg
	else
		echo "SWUPDATE: Failed to extract the read-only filesystem version" > /dev/kmsg
	fi
}

[ "$INITRAMFS" = "1" ] || {
	boot_hook_add preinit_main do_swupdate_gen_sw_versions
}
